---
format:
  revealjs:
    theme: default
    embed-resources: true
---

# Analysis {background-color="#FFCD00"}

## Topics

1. Code Chunks
2. Inline Code
3. Sourcing Scripts

# Code Chunks

## What are Code Chunks? {.smaller}

In contrast to regular R or Python scripts, code in Quarto documents are run within so-called _code chunks_ to separate text from code.

Code Chunks are executable pieces of code that can be weaved between text within a document. 

Depending on the content of your code, they may print output into the document or create new variables, for example.

<br>

````md
```{{r}}
#| echo: true
1993 + 2023
```
````

```
[1] 4016
```

## Anatomy of a Code Chunk

:::: {.columns}

::: {.column width="50%"}

- Code Chunks have 3x _backticks_ on each end: ```` ``` ````  
- The _engine_ should be specified between curly braces, for example: `{r}` or `{python}`  
- The options are specified below the engine, with the _hashpipe_: `#|`  

:::

::: {.column width="50%"}

````md
```{{r}}
#| label: cars-r
#| echo: false
mtcars %>% 
  distinct(cyl)
```
````
<br>
````md
```{{python}}
#| label: car-py
#| echo: false
distinct_cyl = mtcars.drop_duplicates(subset=['cyl'])
```
````
:::

::::

## Code Chunk Options {.smaller}

Code Chunks can be customized with special comments, denoted with `#|` at the top of each code chunk. The arguments you provide to the options are typically `true` or `false`. 

The following [code chunk options](https://quarto.org/docs/computations/execution-options.html) are useful:

- `#| eval: true`: Evaluates the code chunk. 
- `#| echo: true`: Includes the source code in output. 
- `#| output: true`:  Includes the _results_ of executing the code in the output. 
- `#| warning: true`: Include warnings in the output. 
- `#| include: false`: Catch all for preventing anything from being included. 
- `#| label: something-meaningful`: It's good practice to always label code chunks! 

## Code Chunk Options {.smaller}

If you have a code chunk that creates a figure, you can also set several options for the looks of the figure, such as:

- `#| fig.cap: "your figure's caption"` : caption of the figure
- `#| fig-width: 8` : width of the figure
- `#| fig-height: 6` : height of the figure

## Inserting Code Chunks

Code Chunks can be inserted in the following ways:

- **RStudio**: Using the _Ctrl+Alt+I_ keyboard shortcut.

- **VS Code**: Using the _Ctrl+Shift+I_ keyboard shortcut.

If you work with a Visual Editor, you can simply click `Insert` > `Code cell` > `[your programming language]` to add a code chunk to your document.

## Learn More...

...from the Quarto Documentation on Execution Options: [https://quarto.org/docs/computations/execution-options.html](https://quarto.org/docs/computations/execution-options.html)

## Exercise {.smaller}

Refer to the dummy R & Python scripts that have been provided in the `workshop-materials`: 

- Insert a setup code chunk at the beginning of your document (i.e. below the YAML header) to load the necessary packages.

- Create a code chunk in the `Results` section of your document

- Copy a piece/section of the dummy script and paste it into the code chunk.

- Run the code chunk and see if it works alright.

- Repeat the previous three steps until the whole dummy script has been incorporated within code chunks in your manuscript.

- Render the document and check the output.

- Play around with the code chunk options and re-render the document.

```{r}
library(countdown)

countdown(minutes = 15,
          color_background = "#FFCD00")
```

# Inline Code 

## What is Inline Code?

_Inline Code_ allows you to insert results or (quick) calculations directly into the text of a Quarto document, i.e. within Markdown outside of code chunks. 

This is useful when you need to report and describe results in your manuscript in a reproducible way. 

It minimizes errors because you're not copying-and-pasting results, plus the values will be automatically updated in case of changes to the data or code.

## In R: 

```{r}
#| label: Load the penguins dataset
#| echo: false
library(palmerpenguins)
penguins_data <- penguins
```

> There are `r sum(penguins_data$species=="Adelie")` penguins of the "Adelie" species in the dataset.

This line was created as follows:

````md
There are `r knitr::inline_expr("sum(penguins_data$species=='Adelie')")` penguins of the Adelie species in the dataset.
````
<br>
By enclosing the inline code with `` `r ` ``, the code is executed when the document is rendered, displaying the results of the computation. 

There will be no additional text formatting either, which makes the inline code output indistinguishable from surrounding text.

## In Python

For Python, this feature will be hugely simplified from [Quarto v1.4](https://quarto.org/docs/prerelease/1.4/inline.html) onwards.

````
```{{python}}
x = 5 + 5
```
````
````md
The answer of 5 + 5 is `{python} x`
````
For earlier Quarto versions, the solution is a bit overly complicated and does not always seem to work as well:

````
```{{python}}
#| echo: false
radius = 10
from IPython.display import display, Markdown
display(Markdown("""
The radius of the circle is {radius}.
""".format(radius = radius)))
```
````

## Exercise

Take a couple of minutes to play around with the possibilities of _inline code_:

- Do a simple calculation such as `r knitr::inline_expr("25 + 25")` within your text.

- Report the number of "Gentoo" and/or "Chinstrap" species of penguins within the data (hint: refer to the example in the slides).

- Try out one other (simple) computation or calculation!

```{r}
library(countdown)

countdown(minutes = 10,
          color_background = "#FFCD00")
```

# Sourcing Scripts

## Exercise

