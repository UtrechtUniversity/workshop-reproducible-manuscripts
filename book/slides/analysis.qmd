---
format:
  revealjs:
    theme: default
    embed-resources: true
    slide-number: true
    navigation-mode: linear
    controls: true
    code-overflow: wrap
    incremental: true
---

# Analysis {background-color="#FFCD00"}

# Topics

1. Code Chunks
2. Inline Code
3. Sourcing Scripts

# Code Chunks {background-color="#FFCD00"}

## What are Code Chunks? {.smaller}

Code in Quarto documents is run within _code chunks_ to separate text from code.

. . .

Code Chunks are executable pieces of code that can be weaved between text within a document. 

. . .

Depending on the content of your code, they may print output into the document or create new variables, for example.

<br>

. . .


````
```{{r}}
#| echo: true
1993 + 2023
```
````

```{r}
#| echo: false
1993 + 2023
```

## Anatomy of a Code Chunk

:::: {.columns}

::: {.column width="50%"}

- On each end of the code chunk: 3 _backticks_: ```` ``` ````  
- _Engine_ specified between curly brackets: `{r}` or `{python}`  
- Code chunk options directly at the top of the chunk, with the _hashpipe_: `#|`  

:::

::: {.column width="50%"}

````md
```{{r}}
#| label: cars-r
#| echo: false
mtcars %>% 
  distinct(cyl)
```
````
<br>
````md
```{{python}}
#| label: car-py
#| echo: false
distinct_cyl = mtcars.drop_duplicates(subset=['cyl'])
```
````
:::

::::

## Code Chunk Options {.smaller}

Code Chunks have customization options, denoted with `#|`. 

The following [code chunk options](https://quarto.org/docs/computations/execution-options.html) are useful:

- `#| eval: true`: Evaluates the code chunk. 
- `#| echo: true`: Includes the source code in output. 
- `#| output: true`:  Includes the _results_ of executing the code in the output. 
- `#| warning: true`: Include warnings in the output. 
- `#| include: false`: Catch all for preventing anything from being included. 
- `#| label: something-meaningful`: It's good practice to always label code chunks! 

## Code Chunk Options {.smaller}

If you have a code chunk that creates a figure, you can also set several options for the looks of the figure, such as:

- `#| fig-cap: "your figure's caption"` : caption of the figure
- `#| fig-width: 8` : width of the figure
- `#| fig-height: 6` : height of the figure

## Inserting Code Chunks

Code Chunks can be inserted in the following ways:

- **RStudio**: Using the _Ctrl+Alt+I_ keyboard shortcut.
- **VS Code**: Using the _Ctrl+Shift+I_ keyboard shortcut.

If you work with a Visual Editor, you can simply click `Insert` > `Code cell` > `[your programming language]` to add a code chunk to your document.

## Code Chunk Options

If you want to specify options for *all* code chunks in your document, 
you can include the options in your document `yaml`, at the top of the document.

. . .

For example: do not show the code in the document:

```yaml
---
format: html
execute:
  echo: false
---
```

More info on Execution Options: [https://quarto.org/docs/computations/execution-options.html](https://quarto.org/docs/computations/execution-options.html)

## Exercise

Go to the _Code Chunks_ chapter in the workshop book and do the exercise.

You will be pasting some code from a `dummy` script into code chunks in your document!

```{r}
library(countdown)

countdown(minutes = 15,
          color_background = "#FFCD00")
```


# Inline Code {background-color="#FFCD00"}

## What is Inline Code?

_Inline Code_ allows you to insert results or (quick) calculations directly into the text of a Quarto document. Inline code gets *no additional text formatting*, making it is indistinguishable from surrounding text

. . .

This is useful because:

- it allows you to report and describe results in a reproducible way
- it minimizes errors: no manual copy-pasting results
- values will be automatically updated in case of changes to the data or code

## In R: 

```{r}
#| label: Load the penguins dataset
#| echo: false
library(palmerpenguins)
```

> There are `r sum(penguins$species=="Adelie")` penguins of the "Adelie" species in the dataset.

This line was created as follows:

````md
There are `r knitr::inline_expr("sum(penguins_data$species=='Adelie')")` 
penguins of the Adelie species in the dataset.
````


## In Python

For Python, this feature will be hugely simplified from [Quarto v1.4](https://quarto.org/docs/prerelease/1.4/inline.html) onwards.

````
```{{python}}
x = 5 + 5
```
````
````md
The answer of 5 + 5 is `{python} x`
````
For earlier Quarto versions, the solution is a bit more complicated:

````
```{{python}}
#| echo: false
radius = 10
from IPython.display import display, Markdown
display(Markdown("""
The radius of the circle is {radius}.
""".format(radius = radius)))
```
````

## Exercise

Take a couple of minutes to play around with the possibilities of _inline code_!

Go to the _Inline code_ chapter in the workshop handbook to complete the exercise.

```{r}
library(countdown)

countdown(minutes = 10,
          color_background = "#FFCD00")
```

# Sourcing Scripts {background-color="#FFCD00"}

## The What & Why

Quarto allows including *code from external files*, such as R and Python scripts, `.qmd` or `.ipynb` files.

Separating scripts from the manuscript can help with:

-   preventing manual, error-prone work copy-pasting code
-   easier debugging of code
-   making the Quarto document easier to digest
-   adhering to good coding practices to work in a modular fashion

## Working With External Scripts { .smaller}

Code from an external script can be incorporated into your Quarto document by using the `#| file:` chunk option. Once included in the Quarto document, the functions or variables created in the script can be used further.

**R:**

````
```{{r}}
#| file: "your-script.R"
#| eval: true 
```
````

**Python:**

````
```{{.python include="your-script.py"}}
```
````

followed by

````
```{{python}
#| echo: false
%run your-script.py
```
````

## Exercise

The `workshop-materials` contain 2 example scripts: `do_addition.R` and `do_addition.py`.
You will use one of them to include the code in your Quarto document.

Go to the _Sourcing code_ chapter in the workshop book and complete the exercise!

```{r}
library(countdown)

countdown(minutes = 10,
          color_background = "#FFCD00")
```

## Other options

Other options not discussed here:

1. Use *parts of* an external script within the Quarto document, for example to only run a few selected lines.
2. Run a script before or after rendering a Quarto document to a manuscript: [Quarto Docs: Project Scripts](https://quarto.org/docs/projects/scripts.html)
3. Use code chunks from existing Quarto documents or Jupyter notebooks: [Quarto v1.4 Release](https://cwickham.github.io/whats-new-in-quarto/#/embed-outputs-from-other-documents-1)
4. Include entire Quarto documents or Jupyter notebooks within your current Quarto document: [Quarto Docs: Includes](https://quarto.org/docs/authoring/includes.html)